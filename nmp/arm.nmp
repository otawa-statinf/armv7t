///////////////////////////////////////////////////
//
// New ARM description in Sim-nML
//
// Thinked for gliss2.
// Based on "arm/goodies/arm_param/arm.nmp"
// Need to be optimized by optirg. 
//
// July 2009
// R. Dubot Y. Ndongo
//
// January 2011
// Needs to be completed to be working
// J. Barre
//
///////////////////////////////////////////////////


let proc = "arm"

include "simpleType.nmp"


///////////////////////////////////
// LET
//////////////////////////////////

let LSL = 0
let LSR = 1
let ASR = 2
let ROR = 3

// No of user registers
let GPRNum = 32

// No of spsr registers
let SPSRNum = 5

// Dont switch to high Vector
let hivector = 0 

//Mode of a ARM Processor
let mode_user       = 0b10000
let mode_FIQ        = 0b10001
let mode_IRQ        = 0b10010
let mode_supervisor = 0b10011
let mode_abort      = 0b10111
let mode_undefined  = 0b11011
let mode_system     = 0b11111



include "stateReg.nmp"
include "tempVar.nmp"


// Program Counters
//reg CIA[1, s32]
reg NIA[1, s32]    alias = GPR[15] __attr(pc)
//reg PIA[1, s32]


///////////////////////////////////////////
// Intial Values of some registers
///////////////////////////////////////////
op init ()
	action = { 
		NIA = 0x2000;
		//CIA = 0x2000;
		//PIA = 0x2000;

		//LR
		GPR[14]=0x2000;
		TFLAG = 0;
		//SP
		GPR[13]=0x800; 
		GPR[21]=0x600; 
		GPR[23]=0x400; 
		GPR[25]=0x200;    
		GPR[27]=0x1000; 
		GPR[29]=0x1200; 
		//CPSR in SuperVisor mode   
		Ucpsr = 0x13;
		
		// sp init for validator
		// same vales as gdb
		GPR[13 + 10] = 0x800;
	 }



////////////////////////////////////////////////////
// Instructions                                   //
////////////////////////////////////////////////////


op multi = ARM | THUMB

op ARM(x : ARM_instr)
	image = x.image
	syntax = x.syntax
	action = {
                //PIA = CIA;
                //CIA = NIA;
                NIA = NIA + 4;
		x.action;
	}
	instruction_set_select = TFLAG == 0
	instruction_set_name = "ARM"
          
op ARM_instr = dataProcessing 
	| branch 
	| LoadStore 
	| LoadStoreM 
	| interrupt 
	| multiply 
	| semaphore 
	| misc 
	| sra


op dataProcessing = ADD_imm | ADC_shr | ADC_imm | ADD_shr | AND_shr | AND_imm | BIC_shr | BIC_imm
				| CMN_shr | CMN_imm | CMP_shr | CMP_imm | EOR_shr | EOR_imm | MOV_shr | MOV_imm 
				| MVN_shr | MVN_imm | ORR_shr | ORR_imm | RSB_shr | RSB_imm | RSC_shr | RSC_imm 
				| SBC_shr | SBC_imm | SUB_shr | SUB_imm | TEQ_shr | TEQ_imm | TST_shr | TST_imm 

///////////////////////////////////////////
// Branch Instructions
///////////////////////////////////////////
op branch = 
	  BX_ARM
	| B_Cond	


///////////////////////////////////////////
// Load/Store Instructions
///////////////////////////////////////////
op LoadStore = Mem_load_store_imm | Mem_load_store_shr | STRH_imm 
			|STRH_shr | LDRH_imm | LDRH_shr | LDRSB_imm | LDRSB_shr | LDRSH_imm | LDRSH_shr

///////////////////////////////////
//B bit for Load/Store instruction
///////////////////////////////////
op setB = setBon | setBoff



///////////////////////////////////
//R bit (for CPSR/SPSR Instructions)
///////////////////////////////////
op setR = setRon | setRoff



///////////////////////////////////////////
// Load/Store Instructions Multiple
///////////////////////////////////////////
op LoadStoreM = Mem_load_store_multiple


///////////////////////////////////////////
// Software Interruption Instructions
///////////////////////////////////////////
op interrupt = SWI


///////////////////////////////////////////
// Multiply Instructions
///////////////////////////////////////////
op multiply = MLA | MUL | SMULL | UMULL | SMLAL | UMLAL

///////////////////////////////////////////
// Semaphore Instructions
///////////////////////////////////////////
op semaphore = SWP

///////////////////////////////////////////
// Miscellaneous arithmetic Instructions
///////////////////////////////////////////
op misc = CLZ

///////////////////////////////////////////
// Status register access instructions
///////////////////////////////////////////
op sra = MSR_imm | MSR_shr | MRS 


////////////////////////
// Condition          //
////////////////////////
include "condition.nmp"
////////////////////////



/*
Registers access
*/
mode REG_INDEX(r: index) = r
	syntax = format( "%s", 
			switch (r) {
				case 0:"r0"
				case 1:"r1" 
				case 2:"r2" 
				case 3:"r3" 
				case 4:"r4" 
				case 5:"r5" 
				case 6:"r6" 
				case 7:"r7"            
				case 8:"r8" 
				case 9:"r9" 
				case 10:"sl"  
				case 11:"fp" 
				case 12:"ip" 
				case 13:"sp" 
				case 14:"lr" 
				case 15:"pc" 
			})
	image  = format("%4b", r)



macro first_bit_on(v16) = \
	if v16<0..0> == 1 then 15 else \
	if v16<1..1> == 1 then 14 else \
	if v16<2..2> == 1 then 13 else \
	if v16<3..3> == 1 then 12 else \
	if v16<4..4> == 1 then 11 else \
	if v16<5..5> == 1 then 10 else \
	if v16<6..6> == 1 then 9 else \
	if v16<7..7> == 1 then 8 else \
	if v16<8..8> == 1 then 7 else \
	if v16<9..9> == 1 then 6 else \
	if v16<10..10> == 1 then 5 else \
	if v16<11..11> == 1 then 4 else \
	if v16<12..12> == 1 then 3 else \
	if v16<13..13> == 1 then 2 else \
	if v16<14..14> == 1 then 1 else \
	if v16<15..15> == 1 then 0 else \
	-1 endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif \
    
macro syntax_reg(on_off, num_reg) = \
	if on_off == 1 then \
		switch (num_reg) { \
		case 10: "sl"  \
		case 11: "fp" \
		case 12: "ip" \
		case 13: "sp" \
		case 14: "lr" \
		case 15: "pc" \
		default: format("r%d", num_reg) \
		} \
	else \
		"" \
	endif \

macro syntax_reg_format(idx, v16) = \
	format("%s%s", if v16<idx..idx> == 0 then "" else ", " endif, syntax_reg(v16<idx..idx>, idx)) \

mode REG_LIST(r: u16) = r
	image  = format( "%16b", r)
	start = first_bit_on(r)
	syntax = if start == -1 then "" else
		format("%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s",
			syntax_reg_format(0, r),
			syntax_reg_format(1, r),
			syntax_reg_format(2, r),
			syntax_reg_format(3, r),
			syntax_reg_format(4, r),
			syntax_reg_format(5, r),
			syntax_reg_format(6, r),
			syntax_reg_format(7, r),
			syntax_reg_format(8, r),
			syntax_reg_format(9, r),
			syntax_reg_format(10, r),
			syntax_reg_format(11, r),
			syntax_reg_format(12, r),
			syntax_reg_format(13, r),
			syntax_reg_format(14, r),
			syntax_reg_format(15, r)
		) endif
		





////////////////////////
// dataProcessing     //
////////////////////////
include "dataProcessingMacro.nmp"
include "shiftedRegister.nmp"
include "dataProcessing.nmp"


/////////////////////////
// others instructions //
////////////////////////

include "othersInstrMacro.nmp"
include "othersInstr.nmp"

/////////////////////////////
// loadStoreM instructions //
////////////////////////////
include "loadStoreM_Macro.nmp"
include "loadStoreM.nmp"


//////////////////////
// THUMB Instr. Set //
//////////////////////
include "thumb.nmp"


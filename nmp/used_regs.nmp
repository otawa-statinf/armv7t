//
// GLISS V2 -- used registers extension
// Copyright (c) 2010, IRIT - UPS <casse@irit.fr>
//
// This file is part of GLISS2.
//
// GLISS2 is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// GLISS2 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with GLISS2; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
//

// modes

extend condition
	used_regs = { if cond < 14 then "read"(Ucpsr); endif; }

extend setS
	used_regs = { if set then "write"(CPSR); endif; }

extend regShift
	used_regs = { "read"(GPR[shiftAmt.number]); "read"(GPR[r.number]); }

extend immShift
	used_regs = { "read"(GPR[r.number]); }

extend loadstoreSpecifiedShift
	used_regs = { "read"(GPR[r.number]); if shiftKind == ROR && shiftAmt == 0 then "read"(CPSR); endif; }


// data processing instructions

extend ADD_shr, ADC_shr, AND_shr, BIC_shr, EOR_shr, ORR_shr, RSB_shr, RSC_shr, SBC_shr, SUB_shr
	used_regs = {
		if cond.value < 14 then "read"(Ucpsr); endif;
		"read"(GPR[rn.number]);
		"write"(GPR[rd.number]);
		shifter_operand.used_regs;
		sets.used_regs;
	}

extend ADD_imm, ADC_imm, AND_imm, BIC_imm, EOR_imm, ORR_imm, RSB_imm, RSC_imm, SBC_imm, SUB_imm
	used_regs = {
		cond.used_regs;
		"read"(GPR[rn.number]);
		"write"(GPR[rd.number]);
		sets.used_regs;
	}

extend CMN_shr, CMP_shr, TEQ_shr, TST_shr
	used_regs = {
		cond.used_regs;
		"read"(GPR[rn.number]);
		shifter_operand.used_regs;
		"write"(Ucpsr);
	}

extend CMN_imm, CMP_imm, TEQ_imm, TST_imm
	used_regs = {
		cond.used_regs;
		"read"(GPR[rn.number]);
		"write"(Ucpsr);
	}


extend MOV_shr, MVN_shr
	used_regs = {
		cond.used_regs;
		"write"(GPR[rd.number]);
		shifter_operand.used_regs;
		sets.used_regs;
	}

extend MOV_imm, MVN_imm
	used_regs = {
		cond.used_regs;
		"write"(GPR[rd.number]);
		sets.used_regs;
	}


extend CLZ
	used_regs = {
		cond.used_regs;
		"read"(GPR[rm.number]);
		"write"(GPR[rd.number]);
	}


// ****** control instructions ******

extend B_Cond
	used_regs = { cond.used_regs; if setl then "write"(GPR[14]); endif; "write"(GPR[14]); }

extend BX_ARM
	used_regs = { cond.used_regs; "read"(GPR[rd.number]); "write"(PC); }

extend SWI
	used_regs = { "write"(LR_static); "write"(SPSR); "write"(PC); "write"(CPSR); }


// ****** memory instructions ******

extend LDR_imm, LDRH_imm, LDRSB_imm, LDRSH_imm
	used_regs = {
		cond.used_regs;
		"read"(GPR[rn.number]);
		"write"(GPR[rd.number]);
		if setpre == 0 || setw == 1 then "write"(GPR[rn.number]); endif;
	}

extend STR_imm, STRH_imm
	used_regs = {
		cond.used_regs;
		"read"(GPR[rn.number]);
		"read"(GPR[rd.number]);
		if setpre == 0 || setw == 1 then "write"(GPR[rn.number]); endif;
	}

extend LDR_shr
	used_regs = {
		cond.used_regs;
		"read"(GPR[rn.number]);
		"write"(GPR[rd.number]);
		shifter_operand.used_regs;
		if setpre == 0 || setw == 1 then "write"(GPR[rn.number]); endif;
	}

extend LDRH_shr, LDRSB_shr, LDRSH_shr
	used_regs = {
		cond.used_regs;
		"read"(GPR[rn.number]);
		"write"(GPR[rd.number]);
		"read"(GPR[rm.number]);
		if setpre == 0 || setw == 1 then "write"(GPR[rn.number]); endif;
	}

extend STR_shr
	used_regs = {
		cond.used_regs;
		"read"(GPR[rn.number]);
		"read"(GPR[rd.number]);
		shifter_operand.used_regs;
		if setpre == 0 || setw == 1 then "write"(GPR[rn.number]); endif;
	}

extend STRH_shr
	used_regs = {
		cond.used_regs;
		"read"(GPR[rn.number]);
		"read"(GPR[rd.number]);
		"read"(GPR[rm.number]);
		if setpre == 0 || setw == 1 then "write"(GPR[rn.number]); endif;
	}


extend SWP
	used_regs = {
		cond.used_regs;
		"read"(GPR[rn.number]);
		"read"(GPR[rm.number]);
		"write"(GPR[rd.number]);
	}


// ****** multiplication instructions ******

extend MLA
	used_regs = {
		cond.used_regs;
		"read"(GPR[rm.number]);
		"read"(GPR[rs.number]);
		"read"(GPR[rn.number]);
		"write"(GPR[rd.number]);
		sets.used_regs;
	}

extend MUL
	used_regs = {
		cond.used_regs;
		"read"(GPR[rm.number]);
		"read"(GPR[rs.number]);
		"write"(GPR[rd.number]);
		sets.used_regs;
	}

extend SMULL, UMULL, SMLAL, UMLAL
	used_regs = {
		cond.used_regs;
		"read"(GPR[rm.number]);
		"read"(GPR[rs.number]);
		"write"(GPR[rdhi.number]);
		"write"(GPR[rdlo.number]);
		sets.used_regs;
	}


// ****** system instructions ******

extend MSR_imm
	used_regs = {
		cond.used_regs;
		"write"(CPSR);
	}

extend MSR_shr
	used_regs = {
		cond.used_regs;
		"write"(CPSR);
		"read"(GPR[rn.number]);
	}

extend MRS
	used_regs = {
		cond.used_regs;
		"read"(CPSR);
		"write"(GPR[rn.number]);
	}


// ****** multiple memory instructions ******

extend LDM
	used_regs = {
		"count"(2, 19);
		cond.used_regs;
		"read"(GPR[rn.number]);
		if setw == 1 then "write"(GPR[rn.number]); endif;
		i = 0;
		used_regs_rec;
	}
	used_regs_rec = {
		if i <= 15 then
			if reglist<i..i> == 1 then "write"(GPR[i]); endif;
			i = i + 1;
			used_regs_rec;
		endif;
	}

extend STM
	used_regs = {
		"count"(18, 1);
		cond.used_regs;
		"read"(GPR[rn.number]);
		if setw == 1 then "write"(GPR[rn.number]); endif;
		i = 0;
		used_regs_rec;
	}
	used_regs_rec = {
		if i <= 15 then
			if reglist<i..i> == 1 then "read"(GPR[i]); endif;
			i = i + 1;
			used_regs_rec;
		endif;
	}

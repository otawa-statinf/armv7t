

///////////////////////////////////
//R bit (for CPSR/SPSR Instructions)
///////////////////////////////////


op setRon()
	syntax = "spsr"
	image = "1"
	action = {
		RBIT = 1;
	}

op setRoff()
	syntax = "cpsr"
	image = "0"
	action = {
		RBIT = 0;
	}

///////////////////////////////////
//S bit 
///////////////////////////////////
op setSon()
	syntax = "s"
	image = "1"
	action = {
		SBIT = 1;
	}

op setSoff()
	syntax = ""
	image = "0"
	action = {
		SBIT = 0;
	}


///////////////////////////////////
//S bit for LDM/STM
///////////////////////////////////
op setMS = setMSon | setMSoff

op setMSon()
	syntax = "^"
	image = "1"
	action = {
		MSBIT = 1;
	}

op setMSoff()
	syntax = ""
	image = "0"
	action = {
		MSBIT = 0;
	}


///////////////////////////////////
//P bit for Load/Store instruction
///////////////////////////////////
op setP = setPon | setPoff
op setPon()
	syntax = ""
	image = "1"
	action = {
		PBIT = 1;
	}

op setPoff()
	syntax = ""
	image = "0"
	action = {
		PBIT = 0;
	}

///////////////////////////////////
//I bit for Load/Store instruction
///////////////////////////////////
op setI = setIon | setIoff

op setIon()
	syntax = ""
	image = "1"
	action = {
		IBIT = 1;
	}

op setIoff()
	syntax = ""
	image = "0"
	action = {
		IBIT = 0;
	}

///////////////////////////////////
//U bit for Load/Store instruction
///////////////////////////////////
op setU = setUon | setUoff

op setUon()
	syntax = ""
	image = "1"
	action = {
		UBIT = 1;
	}

op setUoff()
	syntax = ""
	image = "0"
	action = {
		UBIT = 0;
	}




///////////////////////////////////
//W bit for Load/Store instruction
///////////////////////////////////
op setW = setWon | setWoff

op setWon()
	syntax = "!"
	image = "1"
	action = {
		WBIT = 1;
	}

op setWoff()
	syntax = ""
	image = "0"
	action = {
		WBIT = 0;
	}

op setLMem = setLMemon | setLMemoff

op setLMemon()
	syntax = "ld"
	image = "1"
	action = {
		LBIT = 1;
	}

op setLMemoff()
	syntax = "st"
	image = "0"
	action = {
		LBIT = 0;
	}

op setL = setLon | setLoff

op setLon()
	syntax = "l"
	image = "1"
	action = {
		LBIT = 1;
	}

op setLoff()
	syntax = ""
	image = "0"
	action = {
		LBIT = 0;
	}

op setH = setHon | setHoff

op setHon()
	syntax = ""
	image = "1"
	action = {
		HBIT = 1;
	}

op setHoff()
	syntax = ""
	image = "0"
	action = {
		HBIT = 0;
	}








///////////////////////////////////////////
// Addressing Mode for Load/Store Multiple
// ARM can handle 4 kind of stack. These modes
// represent the different adressing mode for stacks.
///////////////////////////////////////////

reg IAMODE[1,u1]
reg IBMODE[1,u1]
reg DAMODE[1,u1]
reg DBMODE[1,u1]


///////////////////////////////////////////
// STMIA/LDMIA
///////////////////////////////////////////
mode ia()
     syntax = "ia"
     image = "01"
     action = {
	    IAMODE = 1;
	    IBMODE = 0;
	    DAMODE = 0;
	    DBMODE = 0;
	    }

///////////////////////////////////////////
// STMIB/LDMIB
///////////////////////////////////////////
mode ib()
     syntax = "ib"
     image = "11"
     action = {
	    IAMODE = 0;
	    IBMODE = 1;
	    DAMODE = 0;
	    DBMODE = 0;
	    }

///////////////////////////////////////////
// STMDA/LDMDA
///////////////////////////////////////////
mode da()
     syntax = "da"
     image = "00"
     action = {
	    IAMODE = 0;
	    IBMODE = 0;
	    DAMODE = 1;
	    DBMODE = 0;
	    }

///////////////////////////////////////////
// STMDB/LDMDB
///////////////////////////////////////////
mode db()
     syntax = "db"
     image = "10"
     action = {
	    IAMODE = 0;
	    IBMODE = 0;
	    DAMODE = 0;
	    DBMODE = 1;
	    }

mode addressing_mode = ia | ib | da | db


///////////////////////////////////////////
// Field Mask for CPSR/SPSR Instructions
///////////////////////////////////////////

op fm_f()
	syntax = "f" 
	image  = "1000"
	action = {
		PSRFMODE = 1;
		PSRSMODE = 0;
		PSRXMODE = 0;
		PSRCMODE = 0;
		}

op fm_s()
	syntax = "s" 
	image  = "0100"
	action = {
		PSRFMODE = 0;
		PSRSMODE = 1;
		PSRXMODE = 0;
		PSRCMODE = 0;
		}

op fm_x()
	syntax = "x" 
	image  = "0010"
	action = {
		PSRFMODE = 0;
		PSRSMODE = 0;
		PSRXMODE = 1;
		PSRCMODE = 0;
		}

op fm_c()
	syntax = "c" 
	image  = "0001"
	action = {
		PSRFMODE = 0;
		PSRSMODE = 0;
		PSRXMODE = 0;
		PSRCMODE = 1;
		}


op fm_fs()
	syntax = "fs" 
	image  = "1100"
	action = {
		PSRFMODE = 1;
		PSRSMODE = 1;
		PSRXMODE = 0;
		PSRCMODE = 0;
		}

op fm_fx()
	syntax = "fx" 
	image  = "1010"
	action = {
		PSRFMODE = 1;
		PSRSMODE = 0;
		PSRXMODE = 1;
		PSRCMODE = 0;
		}

op fm_fc()
	syntax = "f" 
	image  = "1001"
	action = {
		PSRFMODE = 1;
		PSRSMODE = 0;
		PSRXMODE = 0;
		PSRCMODE = 1;
		}


op fm_sx()
	syntax = "sx" 
	image  = "0110"
	action = {
		PSRFMODE = 0;
		PSRSMODE = 1;
		PSRXMODE = 1;
		PSRCMODE = 0;
		}

op fm_sc()
	syntax = "sc" 
	image  = "0101"
	action = {
		PSRFMODE = 0;
		PSRSMODE = 1;
		PSRXMODE = 0;
		PSRCMODE = 1;
		}

op fm_xc()
	syntax = "xc" 
	image  = "0011"
	action = {
		PSRFMODE = 0;
		PSRSMODE = 0;
		PSRXMODE = 1;
		PSRCMODE = 1;
		}

op fm_fsx()
	syntax = "fsx" 
	image  = "1110"
	action = {
		PSRFMODE = 1;
		PSRSMODE = 1;
		PSRXMODE = 1;
		PSRCMODE = 0;
		}

op fm_fxc()
	syntax = "fxc" 
	image  = "1011"
	action = {
		PSRFMODE = 1;
		PSRSMODE = 0;
		PSRXMODE = 1;
		PSRCMODE = 1;
		}

op fm_sxc()
	syntax = "sxc"
	image = "0111"
	action = {
		PSRFMODE = 0;
		PSRSMODE = 1;
		PSRXMODE = 1;
		PSRCMODE = 1;
		}

op fm_fsxc()
	syntax = "fsxc"
	image = "1111"
	action = {
		PSRFMODE = 1;
		PSRSMODE = 1;
		PSRXMODE = 1;
		PSRCMODE = 1;
		}

op fm_nob()
	syntax = ""
	image = "0000"
	action = {
		PSRFMODE = 0;
		PSRSMODE = 0;
		PSRXMODE = 0;
		PSRCMODE = 0;
		}

mode field_mask = fm_f | fm_s | fm_x | fm_c | fm_fs | fm_fx | fm_fc | fm_sx | fm_sc | fm_xc | fm_fsx | fm_fxc | fm_sxc | fm_fsxc | fm_nob





///////////////////////////////////////////
// 24bits Immediate values doesnt need to be computed
///////////////////////////////////////////


	 

///////////////////////////////////////////
// Branch instruction, conditional if L bit is set
///////////////////////////////////////////






///////////////////////////////////////////
// Software Interruption Instructions	///	
//
// VI Miscellaneous arithmetic Instructions
///////////////////////////////////////////

///////////////////////////////////////////
// Multiply Instructions
///////////////////////////////////////////


///////////////////////////////////////////
// Semaphore Instructions
///////////////////////////////////////////




///////////////////////////////////////////
// VI Miscellaneous arithmetic Instructions
///////////////////////////////////////////

///////////////////////////////////////////
// Status register access instructions
//
// IV Miscellaneous Instructions (CPSR/SPSR)
///////////////////////////////////////////
